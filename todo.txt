hãy rà soát các file py
kiểm tra logic, và phân tích tool

sau đó 
- đưa ra các cải thiện về trải nghiệm người dùng
- các tính năng mới phù hợp nhu cầu
- kiểm tra các lỗi đang có trong source
- ở nút RDS infomation, tôi muốn tạo một màn hình giống như trong ảnh tôi gửi , code tôi đã có sẵn và muốn bạn chỉnh sửa lại như sau :
   1. Bỏ tính năng connect, bây giờ chỉ có thể xem và copy paste hoặc ip hoặc username 
   2. khi nhấn douple click vào một host trên list thì sẽ mở một màn hình, giống như màn hình edit nhưng màn hình này chỉ có thể xem, đồng thời ở các field như Host/IP, Username, Password đều sẽ kèm theo nút copy để cho người dùng copy, password luôn hiển thị chứ không chuyển qua dấu * 
   3. khi nhấn double click vào thì màn hình đó sẽ kèm theo nút edit, nhấn nút edit sẽ hiển thị màn hình edit, sau khi chỉnh sửa và lưu thì sẽ cập nhật lại danh sách 
   4. căn chỉnh lại width của màn hình đó cho nhỏ lại 
   5. bỏ tính năng connect trong màn hình này
- kiểm tra và thay thế comment tiếng anh trong source qua tiếng việt 
- ở đầu mỗi hàm thì hãy bổ sung comment tóm tắt xử lý của hàm đó trong toàn bộ source
- đồng bộ icon của các màn hình và popup là logo.icon trong folder
- thay đổi font chữ của tool thành font chữ có trong folder fonts nếu có thể , trường hợp không thể thì giữ nguyên như hiện tại 
- ở màn hình main.py, khi đổi ngôn ngữ là tiếng nhật thì tất cả các màn hình con, kèm popup đều phải đổi qua tiếng nhật
- bỏ nút đổi ngôn ngữ ở màn hình log_viewer.py , và sử dụng ngôn ngữ được set ở màn hình main.py
- hiện tại khi đổi qua ngôn ngữ tiếng nhật thì chỉ 1 số mục chỉ đổi qua tiếng nhật, còn lại vẫn ở tiếng việt, hãy tham khảo xử lý ở màn hình log_viewer.py và sửa tất cả các màn hình còn lại sao cho đồng bộ
- bạn hãy trả lời tôi bằn tiếng việt nhé 

Bạn là trợ lý lập trình, làm việc trên dự án Tkinter “ToolONWA VIP v1.0”. Nhiệm vụ:

1. Hoàn thiện hệ thống đa ngôn ngữ (VN/JP):
   a. Bổ sung đầy đủ key dịch cho tất cả các màn hình vào core/i18n.py (Insert, Update, Backup, Log viewer, RDS, thông báo messagebox).
   b. Đảm bảo mọi file dùng UTF-8, không xuất hiện ký tự bị mã hóa.
   c. Tạo hàm tiện ích `_t`, `_handle_language_change`, `_apply_language` trong từng lớp cửa sổ. Đăng ký listener (`i18n.add_listener`) khi khởi tạo, gỡ khi hủy.

2. Refactor các màn hình DB:
   - screen/DB/insert.py, update.py, backup.py
     • Chuyển toàn bộ Label/Button/Popup sang dùng i18n.
     • Lưu trữ LabelFrame/Button trong thuộc tính để có thể cập nhật khi đổi ngôn ngữ.
     • Thêm docstring/comment tiếng Việt mô tả ngắn gọn đầu mỗi hàm.
     • Thay toàn bộ messagebox bằng các chuỗi từ i18n (ví dụ “insert.msg.no_data_generate” v.v.).
     • Đảm bảo icon (`logo.ico`) được áp dụng nếu chưa có.

3. Cải tiến màn hình RDS:
   - screen/General/rdsinfo.py
     • Loại bỏ logic connect (cmdkey/mstsc); chỉ hiển thị danh sách subsystem/host từ rds_hosts.json.
     • Khi double-click host: mở cửa sổ xem chi tiết (Host/IP, Username, Password…, có nút copy từng trường, mật khẩu hiển thị rõ). Có nút Edit để mở dialog hiện có và reload danh sách sau khi lưu.
     • Kích thước cửa sổ chính 320x360, bố cục gọn (subsystem bên trái, host bên phải). Thêm icon từ icons/logo.ico.
     • Tất cả nhãn/nút/messagebox dùng i18n. Thêm docstring/comment tiếng Việt.

4. Log viewer:
   - screen/MU/log_viewer.py
     • Gỡ combobox chọn ngôn ngữ; sử dụng ngôn ngữ lấy từ i18n.
     • Chuyển toàn bộ text, popup, nhãn sang dùng key i18n.
     • Đăng ký listener để cập nhật UI khi đổi ngôn ngữ từ main.
     • Thêm icon, docstring tiếng Việt.

5. Đồng bộ icon & font:
   - Đảm bảo mỗi cửa sổ con (Insert/Update/Backup/RDS/Log viewer) đặt icon logo.ico khi available.
   - Nếu có thể, tận dụng font tùy chỉnh đã nạp từ thư mục fonts (chỉ cần kiểm tra logic hiện tại, áp dụng consistent).

6. MessageBox & comment tiếng Việt:
   - Thay mọi messagebox (“Thiếu thông tin…”, “Restore…”) bằng chuỗi lấy từ i18n.
   - Viết comment hoặc docstring tiếng Việt ngắn gọn cho mọi hàm (ngắn gọn mô tả chức năng).

7. Kiểm thử và rà soát:
   - Chạy `python -m compileall main.py screen` để bảo đảm không lỗi cú pháp.
   - Chạy `python main.py`, kiểm tra:
     • Đổi ngôn ngữ trong main áp dụng cho toàn app.
     • Màn hình Insert/Update/Backup mở bình thường, văn bản hiển thị đúng.
     • Màn hình RDS hiển thị danh sách, double-click mở view, nút copy hoạt động, icon đúng.
     • Log viewer hiển thị đúng ngôn ngữ, không còn combobox ngôn ngữ riêng.
   - Báo cáo lại các thay đổi chính, đảm bảo không còn ký tự bị mã hóa.

Trả về danh sách file đã chỉnh, mô tả thay đổi và bước kiểm thử đã thực hiện.



Bạn là trợ lý lập trình, tiếp tục mở rộng dự án Tkinter “ToolONWA VIP v1.0”. Hãy triển khai ba nhóm tính năng sau:

1. Lịch sử thao tác & log nội bộ
   - Tạo module `core/history.py` (UTF-8) quản lý ghi log thao tác. Sử dụng SQLite (`history.db` trong thư mục configs) với bảng `actions(id INTEGER PRIMARY KEY, timestamp TEXT, action_type TEXT, object_name TEXT, row_count INTEGER, status TEXT, message TEXT, sql_text TEXT)`.
   - Cung cấp API:
       log_action(action_type, object_name, row_count, status, message="", sql_text="")
       get_actions(action_type=None, limit=None)
       export_csv(filepath)
   - Tại các điểm sau, gọi `log_action`:
       • Thành công/ thất bại của Insert/Update/Backup (bao gồm câu lệnh đã generate).
       • Khi chạy backup restore, log số dòng restore.
       • Khi coi log viewer (tùy chọn: log khi người dùng mở file).
   - Xử lý try/except để module history không làm hỏng thao tác chính nếu ghi log lỗi.

2. Mẫu câu lệnh (Template Library)
   - Tạo module `core/templates.py` (UTF-8) quản lý `templates.json` (tự tạo nếu chưa có). Mỗi template {id, name, type [insert/update/sql], description, content, created_at}.
   - API cần có:
        list_templates(template_type=None)
        add_template(name, template_type, content, description="")
        remove_template(template_id)
        get_template(template_id)
   - Trong `screen/DB/insert.py` và `screen/DB/update.py`:
        • Thêm nút “Lưu thành template” (đặt tên/ mô tả).
        • Thêm nút “Chọn template” mở dialog hiển thị danh sách (Treeview), cho phép xem nội dung, áp vào editor hiện tại, xoá template nếu cần.
   - Tất cả popup/nút sử dụng i18n.

3. Lưu lịch sử các câu Insert/Update đã tạo
   - Khi người dùng nhấn “Tạo câu Insert”/“Tạo câu Update”: gọi `history.log_action` với action_type “insert_sql” hoặc “update_sql”, status “draft”, sql_text là câu lệnh đã generate, row_count = số dòng.
   - Khi thực thi Insert/Update thành công: update status thành “success” (tùy chọn: log id trả về, commit action).
   - Trong màn hình lịch sử mới, hiển thị sql_text cắt ngắn, double-click mở popup xem đầy đủ, thêm nút “Sử dụng lại” để:
        • Sao chép vào clipboard.
        • Hoặc đưa thẳng vào màn hình Insert/Update đang mở (có thể gọi phương thức đặt nội dung editor).
   - Nếu cần, tạo API `history.mark_success(action_id)` hoặc log mới status “success”.

4. Giao diện “Lịch sử thao tác”
   - Trong `main.py`, tại khung “Chung” thêm nút “Lịch sử thao tác”.
   - Màn hình mới: Treeview hiển thị các cột timestamp, loại, đối tượng, trạng thái, mô tả. Cho phép lọc theo action_type (Combobox), ô tìm kiếm, nút “Xem chi tiết” mở popup hiển thị message và sql_text.
   - Có nút “Xuất CSV” sử dụng `history.export_csv`.
   - Áp dụng icon `logo.ico`, i18n cho mọi nhãn, comment docstring tiếng Việt cho mỗi hàm.

5. Đa ngôn ngữ (i18n)
   - Bổ sung key tương ứng vào `core/i18n.py` (ví dụ: `history.title`, `history.column.time`, `template.save_title`, …).
   - Đảm bảo các file mới import i18n, có `_t` và listener để đổi ngôn ngữ.

6. Comment tiếng Việt
   - Mỗi hàm trong module mới (`core/history.py`, `core/templates.py`, màn hình lịch sử, dialog template) thêm docstring tiếng Việt ngắn gọn.
   - Nếu chỉnh sửa hàm cũ, cập nhật docstring lớn chuyển sang tiếng Việt.

7. Kiểm thử
   - Chạy `python -m compileall main.py screen core`.
   - Chạy `python main.py`:
        • Tạo insert/update, kiểm tra lịch sử ghi nhận, xem log.
        • Lưu template, chọn template, sử dụng lại, xóa template.
        • Kiểm tra đa ngôn ngữ (VN/JP) áp dụng cho màn hình mới.
   - Ghi chú file mới/sửa, cấu hình (_history.db_, _templates.json_) tự tạo nếu không tồn tại.

Trả về danh sách file chỉnh sửa và mô tả ngắn gọn thay đổi.
